[ this ] is binary-search.qky

( ------ Binary Search ------
  Copyright (C) 2022 Gordon Charlton
   https://github.com/GordonCharlton )

( This is a rightmost binary search. It locates the final
  occurence of an item within an ordered nest.

  Glossary:

  searchwith ( n n [ x --> n b ):

  The first two items on the stack are the lower and upper
  bounds; the range of items within the nest within which to
  search. The range is upper bound exclusive, i.e. to search
  the entire nest the lower bound should be 0 and the upper
  bound should be the size of the nest.

  The next item on the stack is the nest of ordered items
  within which to search.

  The ToS is the item to search for within the nest.

  The word or nest following searchwith should describe how
  the nest is ordered. For example, if the items in the nest
  are numbers in ascending numerical order e.g. [ 2 3 5 7 9 ]
  then < ("less than") describes the ordering, as 2 < 3 < 5
  and so on.

  As with <, it should consume two items from the stack and
  return a boolean.

  searchwith returns two items. The ToS is a boolean.

  If the boolean is true (i.e. 1) then the item searched for
  exists within the nest, and the second on stack is the item
  number of the rightmost instance of the item within the
  nest.

      item number:    0   1   2   3   4
             nest: [ 101 107 127 149 151 ]

  If the boolean is false (i.e. 0) then the item searched for
  does not exists within the nest, and the second on stack is
  the position in the nest where the item should be inserted
  (i.e with "stuff") to maintain the ordering of the nest.

         position:  0   1   2   3   4   5
             nest: [ 101 107 127 149 151 ]


  value.bs, nest.bs, and test.bs are ancillary stacks used by
  searchwith.

  Notes regarding the word or nest following searchwith
  =====================================================

  In simple cases, such as searching for an integer within
  a nest of integers, or a string within a nest of strings
  a simple relational operator such as < or $< will suffice.

  We will consider an example, namely using searchwith within
  a Patience Sort, where this is not so. Here the job of
  searchwith is to search a structure such as

   [ [ 2 1 ] [ 4 3 ] [ 6 5 ] [ 8 7 ] ]

   comparing an integer to the rightmost element of each
   nest, i.e. 1 3 5 and 7.

   We will construct a task specific version of searchwith
   called searchpiles. This is the first pass at the word...

    [ dip [ 0 over size rot ]
     searchwith [ -1 peek < ]
     drop ]                   is searchpiles ( [ n --> n )

  The first line means we do not have to specify upper and
  lower bounds; searchpiles will always search the entire
  nest.

  The second line says we will compare the value we are
  searching for to the rightmost item of a nest.

  The third line says we do not care if the position
  returned is an item number or an insertion position.

  THIS CODE WILL NOT WORK.

  The problem lies in the last few lines of searchwith,
  which figures out whether it has found an item number
  or an insertion position, i.e. if the search was
  successful or not. To do that, it needs a test for
  equality, but the item following searchwith gives a
  "less than" comparison. So it uses this to synthesise a
  test for equality, thus: "A and B are equal if neither
  A is less than B nor B is less than A." In other words
  it will present the arguments to our comparison test in
  both the order A B and the order B A.

  If A is a nest and B is a number, then B A [ -1 peek < ]
  will work as expected, but A B [ -1 peek < ] will fail
  reporting the problem "Expected nest on stack."

  We can fix this by wrapping B in a nest, so it has the
  form as A. Here is a working version.

  [ dip [ 0 over size rot ]
    nested searchwith
      [ -1 peek
        dip [ -1 peek ] < ]
    drop ]                  is searchpiles ( [ n --> n )

)

  [ stack ]                   is value.bs   (         --> n   )
  [ stack ]                   is nest.bs    (         --> n   )
  [ stack ]                   is test.bs    (         --> n   )

  [ ]'[ test.bs put
    value.bs put
    nest.bs put
    1 - swap
    [ 2dup < if done
      2dup + 1 >>
      nest.bs share over peek
      value.bs share swap
      test.bs share do iff
        [ 1 - unrot nip ]
        again
      [ 1+ nip ] again ]
    drop
    nest.bs take over peek
    value.bs take 2dup swap
    test.bs share do
    dip [ test.bs take do ]
    or not
    dup dip [ not + ] ]       is searchwith ( n n [ x --> n b )

